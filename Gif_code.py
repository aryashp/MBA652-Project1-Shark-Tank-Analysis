# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OTEAJaw92b8aU1k7uTnRepdxT0HsmK7h
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model
from mpl_toolkits.mplot3d import Axes3D

######################################## Data preparation #########################################

file = 'Shark.csv'
df = pd.read_csv(file)

X = df[['Valuation Offered', 'Number of sharks in deal']].values.reshape(-1,2)
Y = df['Total Deal Amount']

######################## Prepare model data point for visualization ###############################

x = X[:, 0]
y = X[:, 1]
z = Y

x_pred = np.linspace(1000, 40000, 5000)   # range of porosity values
y_pred = np.linspace(0, 5, 1)  # range of brittleness values
xx_pred, yy_pred = np.meshgrid(x_pred, y_pred)
model_viz = np.array([xx_pred.flatten(), yy_pred.flatten()]).T

################################################ Train #############################################

ols = linear_model.LinearRegression()
model = ols.fit(X, Y)
predicted = model.predict(model_viz)

############################################## Evaluate ############################################

r2 = model.score(X, Y)

############################################## Plot ################################################

plt.style.use('default')

fig = plt.figure(figsize=(20, 7))

ax1 = fig.add_subplot(131, projection='3d')

axes = [ax1]

for ax in axes:
    ax.plot(x, y, z, color='k', zorder=15, linestyle='none', marker='o', alpha=0.5)
    ax.set_xlabel('Valuation Offered', fontsize=12)
    ax.set_ylabel('Number of sharks in deal', fontsize=12)
    ax.set_zlabel('Total Deal Amount', fontsize=12)
    ax.locator_params(nbins=4, axis='x')
    ax.locator_params(nbins=5, axis='x')
    eq = 0.0181 * x + 12.7704 * y + 7.4145

ax1.view_init(elev=15, azim=50)
ax = np.linspace(0, 10000, 100)
ay = np.linspace(0, 5, 100)

ax, ay = np.meshgrid(ax, ay)
eq = 0.0181 * ax + 12.7704 * ay + 7.4145

ax1.plot_surface(ax, ay, eq)

import imageio
import os


filenames = []
for ii in np.arange(0, 360, 1):
    ax1.view_init(elev=32, azim=ii)
    fig.savefig('%d.png' % ii)
    filename = f'{ii}.png'
    filenames.append(filename)

# build gif
with imageio.get_writer('mygif.gif', mode='I') as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)
        
# Remove files
for filename in set(filenames):
    os.remove(filename)